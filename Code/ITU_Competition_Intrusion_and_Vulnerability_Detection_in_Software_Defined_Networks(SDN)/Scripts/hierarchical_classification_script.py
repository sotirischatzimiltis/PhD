# -*- coding: utf-8 -*-
"""HierarchicalClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lEUzpnk4M1tJqV9zP8Y1ochEltW8TkyO
"""

!pip install hiclass

from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import Pipeline

from hiclass import LocalClassifierPerParentNode
import pandas as pd
import numpy as np

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

import seaborn as sns
import matplotlib.pyplot as plt

# mount drive
from google.colab import drive
drive.mount('/content/drive')

def perf_evaluation(y_true,y_pred,class_labels):

    # # Compute the confusion matrix
    matrix = confusion_matrix(y_true,y_pred,normalize='true')
    conf_matrix = confusion_matrix(y_true,y_pred)
    print("Confusion Matrix:")

    # Plot the confusion matrix as a heatmap
    plt.figure(figsize=(15, 15))
    sns.heatmap(matrix, annot=True,fmt='.4f',cmap="viridis", square=True,
                xticklabels=class_labels, yticklabels=class_labels)
    plt.xlabel('Predicted Labels')
    plt.ylabel('True Labels')
    plt.title('Confusion Matrix')
    plt.show()

    # Accuracy and Classification Report
    accuracy = accuracy_score(y_true, y_pred) * 100
    print("Total Accuracy: ",accuracy)
    report = classification_report(y_true,y_pred)
    print("Classification Report")
    print(report)


    # Calculate TP, TN, FP, FN for each class
    class_tp = {}
    class_tn = {}
    class_fp = {}
    class_fn = {}

    for i, label in enumerate(class_labels):
        tp = conf_matrix[i, i]
        tn = conf_matrix.sum() - conf_matrix[i, :].sum() - conf_matrix[:, i].sum() + tp
        fp = conf_matrix[:, i].sum() - tp
        fn = conf_matrix[i, :].sum() - tp

        class_tp[label] = tp
        class_tn[label] = tn
        class_fp[label] = fp
        class_fn[label] = fn

    # Print true positives, true negatives, false positives, and false negatives for each class
    for label in class_labels:
        print(f"Class {label}:")
        print("True Positives (TP):", class_tp[label])
        print("True Negatives (TN):", class_tn[label])
        print("False Positives (FP):", class_fp[label])
        print("False Negatives (FN):", class_fn[label])
        print()

"""# Read Dataset"""
train_file_path ='/content/drive/MyDrive/ITU_Competition_Intrusion_and_Vulnerability_Detection_in_Software_Defined_Networks(SDN)/train_data_70features_mean_resampled.csv'
test_file_path = '/content/drive/MyDrive/ITU_Competition_Intrusion_and_Vulnerability_Detection_in_Software_Defined_Networks(SDN)/test_data_70features_mean_resampled.csv'

train_df = pd.read_csv(train_file_path,skipinitialspace=True)
test_df = pd.read_csv(test_file_path,skipinitialspace=True)


#Split data into X(input features) and Y (labels)
X_train = train_df.drop(train_df.columns[-1], axis=1)
y_train = train_df[train_df.columns[-1]]

X_test = test_df.drop(test_df.columns[-1], axis=1)
y_test = test_df[test_df.columns[-1]]

print(train_df.shape)

print(train_df.isna().sum())

"""Add the root level labels (Normal:0, Attack:1)"""

binary_con = train_df['Label'] == 0
train_df['BinaryLabel'] = np.where(binary_con, 0.0,1.0)

binary_con_test = test_df['Label'] == 0
test_df['BinaryLabel'] = np.where(binary_con_test, 0.0,1.0)

train_df.head()

"""Add level 1 labels if attack(DoS:0,Malware:1,WebAttack:2)"""

condDoS = (train_df['Label'] == 2) | (train_df['Label'] == 3) | (train_df['Label'] == 4) | (train_df['Label'] == 5) | (train_df['Label'] == 6)
condMalware = (train_df['Label'] == 1) | (train_df['Label'] == 7) | (train_df['Label'] == 8) | (train_df['Label'] == 9) | (train_df['Label'] == 10) | (train_df['Label'] == 11)
condWeb = (train_df['Label'] == 12) | (train_df['Label'] == 13) | (train_df['Label'] == 14)
train_df['Level1Label'] = np.where(condDoS, 1.1, np.where(condMalware, 1.2, np.where(condWeb, 1.3, 0.0)))

train_df.head()

"""Add level 2 labels for each of the level 1 labels

* Benign 0 -0
* Bot 1.21 -1
* DDoS 1.11 -2
* DoS_Golden_Eye 1.12 -3
* DoS_Hulk 1.13 -4
* DoS_Slowhttptest 1.14 -5
* DoS_Slowloris 1.15 -6
* FTP_Patator 1.22 -7
* Hearbleed 1.23 -8
* Infiltration 1.24 -9
* PortScan 1.25 -10
* SSH_Patator 1.26 -11
* WebAttack_Brute_Force 1.31 -12
* WebAttack_Sql_Injection 1.32 -13
* WebAttack_XSS 1.33 -14
"""

train_df['Level2Label'] = train_df['Label']

import numpy as np

conditions = [
    train_df['Label'] == 1,
    train_df['Label'] == 2,
    train_df['Label'] == 3,
    train_df['Label'] == 4,
    train_df['Label'] == 5,
    train_df['Label'] == 6,
    train_df['Label'] == 7,
    train_df['Label'] == 8,
    train_df['Label'] == 9,
    train_df['Label'] == 10,
    train_df['Label'] == 11,
    train_df['Label'] == 12,
    train_df['Label'] == 13,
    train_df['Label'] == 14,
]
choices = [1.21, 1.11, 1.12, 1.13, 1.14, 1.15, 1.22, 1.23, 1.24, 1.25, 1.26, 1.31, 1.32, 1.33]
train_df['Level2Label'] = np.select(conditions, choices, default=0.00)

train_df.head()

#Split data into X(input features) and Y (labels)
X_train = train_df.drop(train_df.columns[-4:], axis=1) # dropv last two columns
y_train = train_df[train_df.columns[-3:]] # get last column which is the binary labels

X_test = test_df.drop(test_df.columns[-2:], axis=1)
y_test = test_df[test_df.columns[-2]]

"""try out hiclass method"""

from hiclass import LocalClassifierPerParentNode

from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
DT_clf = tree.DecisionTreeClassifier()
from sklearn.ensemble import ExtraTreesClassifier
EX_clf = ExtraTreesClassifier(n_estimators=100, max_depth=None,min_samples_split=2, random_state=0)
RF_clf = RF_clf = RandomForestClassifier(n_estimators=60, max_depth=None,min_samples_split=2, random_state=0,verbose=2)

lcppn = LocalClassifierPerParentNode(local_classifier=EX_clf)

lcppn.fit(X_train,y_train)

y_pred = lcppn.predict(X_test)

print(y_pred[:,2].shape)
y_pred_l2= y_pred[:,2]
y_pred = np.array(y_pred_l2, dtype=float)
print(y_pred)

class_labels = ['Benign','Bot','DDoS','DoS_Golden_Eye','DoS_Hulk','DoS_Slowhttptest','DoS_Slowloris','FTP_Patator',
        'Hearbleed','Infiltration','PortScan','SSH_Patator','WebAttack_Brute_Force','WebAttack_Sql_Injection','WebAttack_XSS']

# Define the mapping of "Level2Label" values to "Label" values in a dictionary.
mapping_dict = {
    1.21: 1,
    1.11: 2,
    1.12: 3,
    1.13: 4,
    1.14: 5,
    1.15: 6,
    1.22: 7,
    1.23: 8,
    1.24: 9,
    1.25: 10,
    1.26: 11,
    1.31: 12,
    1.32: 13,
    1.33: 14,
    0.00: 0
}

y_pred = [mapping_dict[prediction] for prediction in y_pred]

perf_evaluation(y_test,y_pred,class_labels)